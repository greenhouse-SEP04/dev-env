version: "3.8"

services:
  # ──────────────────────────
  # 1. PostgreSQL
  # ──────────────────────────
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  # ──────────────────────────
  # 2. LocalStack (AWS emulator)
  # ──────────────────────────
  localstack:
    image: localstack/localstack-pro:latest
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      SERVICES:                 s3,lambda,sts,ecr,ecs,events,iam,cloudwatch,ec2,rds,secretsmanager,cloudfront,elb,elbv2,registry
      DEBUG:                    "1"
      DATA_DIR:                 /var/lib/localstack
      LOCALSTACK_AUTH_TOKEN:    ${LOCALSTACK_AUTH_TOKEN}
      # run Lambdas in‑process so no Docker socket is strictly required:
      LAMBDA_EXECUTOR:          local
      # if you ever switch back to Docker executor:
      LAMBDA_REMOTE_DOCKER:     "false"
      # (optional) network name if using custom Docker networks for your Lambdas:
      # LAMBDA_DOCKER_NETWORK:    bridge
    volumes:
      - localstack_data:/var/lib/localstack
      # mount host Docker for Docker‑in‑Docker support (not needed with local executor)
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "awslocal s3 ls"]
      interval: 10s
      retries: 5

  # ──────────────────────────
  # 3. ASP.NET Core back-end API
  # ──────────────────────────
  api:
    build:
      context: ../api
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
    ports:
      - "${API_HOST_PORT}:8080"
    environment:
      SEED_DB:                      "true"
      ASPNETCORE_URLS:              http://+:8080
      ConnectionStrings__DefaultConnection: >-
        Host=db;Port=5432;
        Database=${POSTGRES_DB};
        Username=${POSTGRES_USER};
        Password=${POSTGRES_PASSWORD}
      JWT__ValidIssuer:             ${JWT__ValidIssuer}
      JWT__ValidAudience:           ${JWT__ValidAudience}
      JWT__Secret:                  ${JWT__Secret}
      WorkerCredentials__Username:  ${WorkerCredentials__Username}
      WorkerCredentials__Password:  ${WorkerCredentials__Password}
      AWS__Region:                  ${AWS_DEFAULT_REGION}
      AWS__TelemetryBucket:         ${telemetry_bucket:-greenhouse-telemetry-bucket}
      AWS__ServiceURL:              http://localstack:4566

  # ──────────────────────────
  # 4. ML Service (Python Lambda)
  # ──────────────────────────
  ml:
    build:
      context: ../mal
    working_dir: /app
    volumes:
      - ../mal/src:/app/src:delegated
    command: bash -c "pip install --no-cache-dir -r requirements.txt && python -u src/greenhouse_ml_service.py"
    env_file:
      - .env
    environment:
      AWS_ENDPOINT_URL: http://localstack:4566
      S3_BUCKET:         greenhouse-ml-artifacts
      MIN_SAMPLES:       10
    depends_on:
      localstack:
        condition: service_healthy

  # ──────────────────────────
  # 5. React + Vite front-end (with HMR)
  # ──────────────────────────
  web:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ../web:/app:delegated
      - /app/node_modules
    ports:
      - "${WEB_HOST_PORT}:3000"
    environment:
      VITE_API_BASE_URL: http://api:8080
    depends_on:
      api:
        condition: service_started
    command: >
      sh -c "
        corepack enable &&
        pnpm install &&
        pnpm dev -- --host 0.0.0.0
      "

volumes:
  pgdata:
  localstack_data:
